// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering should render the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReplyComment
    getCommentReplies={[MockFunction]}
    replies=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="reply_button"
          onClick={[Function]}
          onKeyPress={[Function]}
          role="searchbox"
          tabIndex="-1"
        >
          <FontAwesome
            className="fav_icons"
            name="comments"
          />
          Reply
        </div>,
        <div />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <FontAwesome
              className="fav_icons"
              name="comments"
            />,
            "Reply",
          ],
          "className": "reply_button",
          "onClick": [Function],
          "onKeyPress": [Function],
          "role": "searchbox",
          "tabIndex": "-1",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "fav_icons",
              "name": "comments",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "Reply",
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="reply_button"
            onClick={[Function]}
            onKeyPress={[Function]}
            role="searchbox"
            tabIndex="-1"
          >
            <FontAwesome
              className="fav_icons"
              name="comments"
            />
            Reply
          </div>,
          <div />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FontAwesome
                className="fav_icons"
                name="comments"
              />,
              "Reply",
            ],
            "className": "reply_button",
            "onClick": [Function],
            "onKeyPress": [Function],
            "role": "searchbox",
            "tabIndex": "-1",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "fav_icons",
                "name": "comments",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "Reply",
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
